% make dv
Observe STDOUT
Check out lines with prefix "----------"

% more mux2to1_d_sim.rpt
View report file
Note that the simulation was stopped due to $fatal in ../design/mux2to1_d_tb.sv

% vim ../design/mux2to1_d_tb.sv
Add a comment "//" at line 27 to avoid $fatal

% make dv
Observe STDOUT

% more mux2to1_d_sim.rpt
View report file
Note that the table shows the signals values for each of the random tests
No FAIL, all PASS

% vim ../design/mux2to1_d_tb.sv
Change the NUM_TESTS to 30

% make dv
Observe STDOUT

% more mux2to1_d_sim.rpt
View report file
There should be 5 FAIL

% vim ../design/mux2to1_d_tb.sv
Change the seed_value to 300

% make dv
Observe STDOUT

% more mux2to1_d_sim.rpt
View report file
There should be 9 FAIL

% vim ../design/mux2to1_d_tb.sv
Change the seed_value to 200

% make dv
Observe STDOUT

% more mux2to1_d_sim.rpt
View report file
There should be 5 FAIL

% more mux2to1_sim.fsdb
The binary format Fast-Signal-Database waveform was created

% vim ../design/mux2to1_d_tb.sv
Modify these to add in the simulation time stamp, see below
        $fdisplay(fd_tb, "Seed | Test# | a | b | sel | y | expected | PASS/FAIL | TIME | RANDOM");
        $fdisplay(fd_tb, "---------------------------------------------------------------------");
                $fdisplay(fd_tb, "%4d | %5d | %b | %b | %3b | %b | %8b | PASS      | %4d | %6d",
                          seed_value, i_tb, a_tb, b_tb, sel_tb, y_tb, expected_tb, $time, random_value);
                $fdisplay(fd_tb, "%4d | %5d | %b | %b | %3b | %b | %8b | FAIL--    | %4d | %6d",
                          seed_value, i_tb, a_tb, b_tb, sel_tb, y_tb, expected_tb, $time, random_value);

% mux2to1_d_simv -gui &
Launch verdi at the background
Simulation > Restart > Yes
Simulation > Run/Continue
Tools > New Schematic from Source > New Schematic
Tools > New Waveform...
Signal > Get Signals
Select the signals of mux2to1_d i.e. a_tb, b_tb, sel_tb, expected_tb
Signal > Get Signals
Select the signals of mux2to1 i.e. y
[Shift z] to zoom in
[z] to zoom out
[f] to zoom full
Select signals: expected_tb and y
Tools > Waveform Compare > Compare 2 Signals
Unselect both signals
Select signal y only, right click
Show OneTrace Signals > Driver
Now in the source code window, you should see the driver for signal y
Note that y = b for both cases which is wrong
Do not exit verdi

% vim ../design/mux2to1_d.sv
Correct the code to reflect y = a when 1'b0

In verdi
Simulation > Restart > Yes
Simulation > Run/Continue
Import Design > From File
Go to ../design
Double click mux2to1_d.sv
Double click mux2to1_d_tb.sv
OK
Simulation ? Rebuild and Restart
Use Script Generated by VCS to Rebuild
Simulation > Invoke Simulator
Simulation > Run/Continue
Pay attention to the console window
There should be 0 FAIL
Exit

% make dv
Observe STDOUT

% more mux2to1_d_sim.rpt
View report file
Note that the table shows the signals values for each of the random tests
No FAIL, all PASS
